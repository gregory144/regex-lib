#!/usr/bin/env ruby

require 'test/unit'
require 'regex'

class Regex_Test < Test::Unit::TestCase

    def regex_test(expr, str, val = true)
        assert(Regex::Regex.match(expr, str) == val)
    end

    def test_simple
        regex_test("a", "a")
        regex_test("a", "b", false)
        regex_test("b", "b")
        regex_test("a*", "")
        regex_test("a*", "a")
        regex_test("a*", "aa")
        regex_test("a*", "aaaaaaa")
        regex_test("a*", "aaabaaaa", false)
        regex_test("a*", "b", false)
        regex_test("a*", "baaa", false)
        regex_test("a*", "aaab", false)
        regex_test("ab", "", false)
        regex_test("ab", "a", false)
        regex_test("ab", "b", false)
        regex_test("ab", "ab")
        regex_test("ab", "abc", false)
        regex_test("ab", "abb", false)
        regex_test("ab", "aab", false)
        regex_test("abc", "", false)
        regex_test("abc", "a", false)
        regex_test("abc", "b", false)
        regex_test("abc", "c", false)
        regex_test("abc", "ab", false)
        regex_test("abc", "bc", false)
        regex_test("abc", "abc")
        regex_test("abc", "aabc", false)
        regex_test("abc", "abbc", false)
        regex_test("abc", "abcc", false)
        regex_test("abc", "abcabc", false)
        regex_test("abcd", "abcd")
        regex_test("abcd", "abccd", false)
        regex_test("abcde", "abcde")
        regex_test("abcde", "abde", false)
        regex_test("ab*", "a")
        regex_test("ab*", "ab")
        regex_test("ab*", "abb")
        regex_test("ab*", "abbbbb")
        regex_test("ab*", "b", false)
        regex_test("ab*", "ba", false)
        regex_test("a*b", "b")
        regex_test("a*b", "ab")
        regex_test("a*b", "aab")
        regex_test("a*b", "a", false)
        regex_test("a*b*", "")
        regex_test("a*b*", "a")
        regex_test("a*b*", "b")
        regex_test("a*b*", "ab")
        regex_test("a*b*", "aa")
        regex_test("a*b*", "bb")
        regex_test("a*b*", "aab")
        regex_test("a*b*", "abb")
        regex_test("a*b*", "aaa")
        regex_test("a*b*", "aaabbb")
        regex_test("a*b*", "ba", false)
        regex_test("a*b*", "c", false)
        regex_test("a*b*", "aaaac", false)
        regex_test("a**", "")
        regex_test("a**", "a")
        regex_test("a**", "aaaa")
        regex_test("a**", "b", false)
        regex_test("a**", "b", false)
        regex_test("a**b", "b")
        regex_test("a**b", "ab")
        regex_test("a**b", "aab")
        regex_test("ab*c", "ac")
        regex_test("ab*c", "abc")
        regex_test("ab*c", "abbc")
        regex_test("ab*c", "abbbbbbc")
        regex_test("ab*c", "bbbbbbc", false)
        regex_test("ab*c", "abbbbbb", false)
        regex_test("ab*c", "a", false)
        regex_test("ab*c", "c", false)
        regex_test("a*b*c*", "")
        regex_test("a*b*c*", "a")
        regex_test("a*b*c*", "b")
        regex_test("a*b*c*", "c")
        regex_test("a*b*c*", "d", false)
        regex_test("a*b*c*", "ab")
        regex_test("a*b*c*", "ac")
        regex_test("a*b*c*", "bc")
        regex_test("a*b*c*", "ad", false)
        regex_test("a*b*c*", "ba", false)
        regex_test("a*b*c*", "bc")
        regex_test("a*b*c*", "ca", false)
        regex_test("a*b*c*", "cb", false)
        regex_test("a*b*c*", "aa")
        regex_test("a*b*c*", "bb")
        regex_test("a*b*c*", "cc")
        regex_test("a*b*c*", "aab")
        regex_test("a*b*c*", "abb")
        regex_test("a*b*c*", "abbc")
        regex_test("a*b*c*", "aaaaaaabc")
        regex_test("a*b*c*", "aaabbbbbbc")
        regex_test("a*b*c*", "aaabbbbabbc", false)
        regex_test("a*b*c*", "aacbc", false)
    end

    def test_parens
        regex_test("(a)", "a")
        regex_test("(ab)", "ab")
        regex_test("(ab)", "a", false)
        regex_test("(ab)c", "abc")
        regex_test("(ab)c", "ac", false)
        regex_test("(a)bc", "abc")
        regex_test("(a)bc", "bc", false)
        regex_test("a(b)c", "abc")
        regex_test("a(b)c", "ab", false)
        regex_test("ab(c)", "abc")
        regex_test("ab(c)", "", false)
        regex_test("(ab)(cd)", "abcd")
        regex_test("(ab)(cd)", "bcd", false)
        regex_test("(ab)*(cd)", "cd")
        regex_test("(ab)*(cd)", "abcd")
        regex_test("(ab)*(cd)", "acd", false)
        regex_test("(ab)*(cd)", "acid", false)
        regex_test("(ab)*(cd)", "bcd", false)
        regex_test("(b)*", "")
        regex_test("(b)*", "b")
        regex_test("(b)*", "bbb")
        regex_test("(b)*", "ba", false)
        regex_test("(b)*", "ab", false)
        regex_test("a(b)*", "a")
        regex_test("a(b)*", "ab")
        regex_test("a(b)*", "abbbb")
        regex_test("a(b)*", "aa", false)
        regex_test("a(b)*", "aba", false)
        regex_test("(ab)*(cd)*", "")
        regex_test("(ab)*(cd)*", "ab")
        regex_test("(ab)*(cd)*", "ababab")
        regex_test("(ab)*(cd)*", "cd")
        regex_test("(ab)*(cd)*", "cdcd")
        regex_test("(ab)*(cd)*", "abcd")
        regex_test("(ab)*(cd)*", "ababcd")
        regex_test("(ab)*(cd)*", "abcdcd")
        regex_test("(ab)*(cd)*", "acd", false)
        regex_test("(ab)*(cd)*", "abc", false)
        regex_test("(ab)*(cd)*", "abd", false)
        regex_test("(ab)*(cd)*", "abababbab", false)
        regex_test("(ab)*(cd)*", "cdcdcdc", false)
        regex_test("(ab)*(cd)*(e)*", "")
        regex_test("(ab)*(cd)*(e)*", "abe")
        regex_test("(ab)*(cd)*(e)*", "abcde")
        regex_test("(ab)*(cd)*(e)*", "cdeeeeeee")
        regex_test("(ab)*(cd)*(e)*", "cdabe", false)
        regex_test("(ab)*(cd)*(e)*", "abce", false)
        regex_test("(ab)*(cd)*(e)*", "acde", false)
        regex_test("(ab)*(cd)*(e)*", "abababcdcdcdeee")
        regex_test("(ab)*(cd)*(e)*", "abecd", false)
    end

    def test_or
        regex_test("a|b", "a")
        regex_test("a|b", "b")
        regex_test("a|b", "", false)
        regex_test("a|b", "ab", false)
        regex_test("a|b|c", "a")
        regex_test("a|b|c", "b")
        regex_test("a|b|c", "c")
        regex_test("a|b|c", "d", false)
        regex_test("a|b|c", "ab", false)
        regex_test("a|b|c", "bc", false)
        regex_test("a|b|c|d", "b")
        regex_test("a|b|c|d", "d")
        regex_test("a|b|c|d", "", false)
        regex_test("a|b|c|d", "e", false)
        regex_test("(a)|b", "a")
        regex_test("(a)|b", "b")
        regex_test("(a)|b", "", false)
        regex_test("(a)|b", "ab", false)
        regex_test("(a)|b", "c", false)
        regex_test("(a)|(b)", "a")
        regex_test("(a)|(b)", "b")
        regex_test("(a)|(b)", "", false)
        regex_test("(a)|(b)", "ab", false)
        regex_test("ab|c", "ab")
        regex_test("ab|c", "c")
        regex_test("ab|c", "", false)
        regex_test("ab|c", "ac", false)
        regex_test("ab|c", "abc", false)
        regex_test("(ab)|c", "ab")
        regex_test("(ab)|c", "c")
        regex_test("(ab)|c", "", false)
        regex_test("(ab)|c", "ac", false)
        regex_test("(ab)|c", "abc", false)
        regex_test("ab|cd", "ab")
        regex_test("ab|cd", "cd")
        regex_test("ab|cd", "abcd", false)
        regex_test("ab|cd", "a", false)
        regex_test("ab|cd", "b", false)
        regex_test("ab|cd", "c", false)
        regex_test("ab|cd", "d", false)
        regex_test("ab|cd", "ac", false)
        regex_test("ab|cd", "ad", false)
        regex_test("ab|cd", "bc", false)
        regex_test("ab|cd", "bd", false)
        regex_test("ab|cd", "", false)
        regex_test("ab|cd", "e", false)
        regex_test("ab|cde|fg", "ab")
        regex_test("ab|cde|fg", "cde")
        regex_test("ab|cde|fg", "fg")
        regex_test("ab|cde|fg", "", false)
        regex_test("ab|cde|fg", "a", false)
        regex_test("ab|cde|fg", "c", false)
        regex_test("ab|cde|fg", "f", false)
        regex_test("ab|cde|fg", "d", false)
        regex_test("ab|cde|fg", "abfg", false)
        regex_test("ab|cde|fg", "cdefg", false)
        regex_test("ab|cd*e|fg", "ab")
        regex_test("ab|cd*e|fg", "ce")
        regex_test("ab|cd*e|fg", "cde")
        regex_test("ab|cd*e|fg", "cdddde")
        regex_test("ab|cd*e|fg", "fg")
        regex_test("ab|cd*e|fg", "", false)
        regex_test("ab|cd*e|fg", "a", false)
        regex_test("ab|cd*e|fg", "c", false)
        regex_test("ab|cd*e|fg", "cdee", false)
        regex_test("ab|cd*e|fg", "cdeee", false)
        regex_test("ab|cd*e|fg", "h", false)
        regex_test("ab|cd|ef|gh", "ab")
        regex_test("ab|cd|ef|gh", "cd")
        regex_test("ab|cd|ef|gh", "ef")
        regex_test("ab|cd|ef|gh", "gh")
        regex_test("ab|cd|ef|gh", "", false)
        regex_test("ab|cd|ef|gh", "e", false)
        regex_test("a*|b", "")
        regex_test("a*|b", "a")
        regex_test("a*|b", "b")
        regex_test("a*|b", "aaa")
        regex_test("a*|b", "aaaaaaaaaaaaaaaaaaaaaa")
        regex_test("a*|b", "aaaab", false)
        regex_test("a*|b", "aab", false)
        regex_test("a|b*|c", "")
        regex_test("a|b*|c", "a")
        regex_test("a|b*|c", "b")
        regex_test("a|b*|c", "bbbb")
        regex_test("a|b*|c", "bbbbbbbb")
        regex_test("a|b*|c", "c")
        regex_test("a|b*|c", "ab", false)
        regex_test("a|b*|c", "bd", false)
        regex_test("(ab*c)|d|e*", "")
        regex_test("(ab*c)|d|e*", "ac")
        regex_test("(ab*c)|d|e*", "d")
        regex_test("(ab*c)|d|e*", "e")
        regex_test("(ab*c)|d|e*", "eeee")
        regex_test("(ab*c)|d|e*", "abc")
        regex_test("(ab*c)|d|e*", "abbbbbc")
        regex_test("(ab*c)|d|e*", "a", false)
        regex_test("(ab*c)|d|e*", "bbbbc", false)
        regex_test("(ab*c)|d|e*", "abcde", false)
        regex_test("(ab*c)|d|e*", "acd", false)
        regex_test("ab|cd*e|(fg)|hijk", "ab")
        regex_test("ab|cd*e|(fg)|hijk", "ce")
        regex_test("ab|cd*e|(fg)|hijk", "cde")
        regex_test("ab|cd*e|(fg)|hijk", "fg")
        regex_test("ab|cd*e|(fg)|hijk", "hijk")
        regex_test("ab|cd*e|(fg)|hijk", "", false)
        regex_test("ab|cd*e|(fg)|hijk", "abc", false)
        regex_test("ab|cd*e|(fg)|hijk", "cdee", false)
        regex_test("abcd*(efg)|h(ij)*k", "abcefg")
        regex_test("abcd*(efg)|h(ij)*k", "hk")
        regex_test("abcd*(efg)|h(ij)*k", "abcdefg")
        regex_test("abcd*(efg)|h(ij)*k", "hijk")
        regex_test("abcd*(efg)|h(ij)*k", "abcddddefg")
        regex_test("abcd*(efg)|h(ij)*k", "hijijijijk")
        regex_test("abcd*(efg)|h(ij)*k", "", false)
        regex_test("abcd*(efg)|h(ij)*k", "abcdef", false)
        regex_test("abcd*(efg)|h(ij)*k", "hij", false)
        regex_test("abcd*(efg)|h(ij)*k", "ijk", false)
    end
end 


